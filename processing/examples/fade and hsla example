var serial
var inData

var r
var sensorInput

var iteration = 0
var circleDiameter = 10

// Angle and step size
var theta = 0
var lastTheta
var theta_step_angle = 0.01

var options = {
  baudrate: 115200
}

function setup () {
  createCanvas(800, 800)
	c = color('hsla(204, 8%, 24%, 1)')
  background(c)

  r = height * 0.45

  // Make a new instance of the serialport library
    serial = new p5.SerialPort()
    serial.on('data', onSerialData)
    serial.on('error', onSerialError)

  // Automatically open a connection to the first serial device we find
    serial.on('list', function (list) {
    console.log(list);

  // Remove the Bluetooth device that appears on a Mac
    list = list.filter(function (device) {
      return device.indexOf('Bluetooth-Incoming-Port') === -1
    })

    if (list.length) {
      serial.open(list[0], options)
      serial.clear()
    }
  })

  serial.list()
}

function draw () {
  // Translate the origin point to the center of the screen
  translate(width/2, height/2)
  var x = r * sensorInput * cos(theta)
  var y = r * sensorInput * sin(theta)

	c = color('hsla(204, 8%, 24%, 0.002)') 
	rectMode(CENTER);
	fill(c); // Use color variable 'c' as fill color
  noStroke(); // Don't draw a stroke around shapes
  rect(0, 0, 800, 800); // Draw rectangle
	ellipseMode(CENTER)
	
	h = round(iteration % 360)
	
	c = color('hsla(' + h + ', 100%, 50%, 1)')
	noStroke()
  fill(c)
  ellipse(x, y, circleDiameter, circleDiameter)
	
	theta += theta_step_angle
	iteration += 0.1
}

function onSerialData () {
  var inString = serial.readLine().trim()
  if (inString.length > 0) {
    sensorInput = map(Number(inString), 0, 400000, 0.25, 1)
    inData = inString
  }
}

function onSerialError(err) {
  println('Something went wrong with the serial port. ' + err)
}

function keyPressed() {
  // You can press the down arrow to download an copy of the visualisation
  if (keyCode === DOWN_ARROW) {
    saveCanvas("image", "jpg")
  }
	  // space bar clears the screen
  if (key === ' ') {
    background(360);
  }
}
